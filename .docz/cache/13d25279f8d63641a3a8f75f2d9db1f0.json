{"remainingRequest":"/Users/matt-wood/code/hoc-toolbox/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/preset-env\",{\"modules\":false}],\"@babel/preset-react\",[\"/Users/matt-wood/code/hoc-toolbox/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[],\"cacheDirectory\":true,\"babelrc\":false}!/Users/matt-wood/code/hoc-toolbox/src/components/Filter.mdx","dependencies":[{"path":"/Users/matt-wood/code/hoc-toolbox/src/components/Filter.mdx","mtime":1537393621505},{"path":"/Users/matt-wood/code/hoc-toolbox/node_modules/cache-loader/dist/cjs.js","mtime":1537388303434},{"path":"/Users/matt-wood/code/hoc-toolbox/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1537388303418}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/matt-wood/code/hoc-toolbox/src/components/Filter.mdx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nimport { Playground, PropsTable } from 'docz';\nimport Example from './utils/Example';\nimport { Filter } from '../index.js';\nimport data from './sample';\nimport { styles } from './demo.module.css';\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"filter\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Filter\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"properties\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Properties\"), React.createElement(PropsTable, {\n    of: Filter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"basic-usage\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Basic usage\"), React.createElement(Playground, {\n    __position: 1,\n    __code: \"<Example>\\n  <Filter data={data} search=\\\"Bernard\\\">\\n    {results => (\\n      <table className=\\\"table\\\">\\n        <thead>\\n          <tr>\\n            {Object.keys(data[0]).map(key => (\\n              <td>{key.toUpperCase().replace('_', ' ')}</td>\\n            ))}\\n          </tr>\\n        </thead>\\n        {results.map(result => (\\n          <tbody>\\n            <tr>\\n              {Object.keys(result).map(key => (\\n                <td>\\n                  {typeof result[key] === 'boolean'\\n                    ? String(result[key])\\n                    : result[key]}\\n                </td>\\n              ))}\\n            </tr>\\n          </tbody>\\n        ))}\\n      </table>\\n    )}\\n  </Filter>\\n</Example>\",\n    __scope: {\n      props: props,\n      Example: Example,\n      Filter: Filter,\n      data: data,\n      styles: styles\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Example, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Filter, {\n    data: data,\n    search: \"Bernard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, function (results) {\n    return React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, Object.keys(data[0]).map(function (key) {\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, key.toUpperCase().replace('_', ' '));\n    }))), results.map(function (result) {\n      return React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, Object.keys(result).map(function (key) {\n        return React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, typeof result[key] === 'boolean' ? String(result[key]) : result[key]);\n      })));\n    }));\n  }))));\n});",{"version":3,"sources":["/Users/matt-wood/code/hoc-toolbox/src/components/Filter.mdx"],"names":["React","MDXTag","Playground","PropsTable","Example","Filter","data","styles","components","props","results","Object","keys","map","key","toUpperCase","replace","result","String"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Example from './utils/Example'\nimport { Filter } from '../index.js'\nimport data from './sample'\nimport { styles } from './demo.module.css';\n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"filter\"}}>{`Filter`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"properties\"}}>{`Properties`}</MDXTag>\n<PropsTable of={Filter} />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<Playground __position={1} __code={`<Example>\n  <Filter data={data} search=\"Bernard\">\n    {results => (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {Object.keys(data[0]).map(key => (\n              <td>{key.toUpperCase().replace(\\'_\\', \\' \\')}</td>\n            ))}\n          </tr>\n        </thead>\n        {results.map(result => (\n          <tbody>\n            <tr>\n              {Object.keys(result).map(key => (\n                <td>\n                  {typeof result[key] === \\'boolean\\'\n                    ? String(result[key])\n                    : result[key]}\n                </td>\n              ))}\n            </tr>\n          </tbody>\n        ))}\n      </table>\n    )}\n  </Filter>\n</Example>`} __scope={{props,Example,Filter,data,styles}}>\n  <Example>\n    <Filter data={data} search=\"Bernard\">\n      {results => (\n        <table className='table'>\n            <thead>\n              <tr>\n                {Object.keys(data[0]).map(key => (\n                  <td>{key.toUpperCase().replace('_', ' ')}</td>\n                ))}\n              </tr>\n            </thead>\n            {results.map(result => (\n              <tbody>\n                <tr>\n                  {Object.keys(result).map(key => (\n                    <td>\n                      {typeof result[key] === 'boolean'\n                        ? String(result[key])\n                        : result[key]\n                      }\n                    </td>\n                  ))}\n                </tr>\n              </tbody>\n            ))}\n          </table>\n      )}\n    </Filter>\n  </Example>\n</Playground></MDXTag>\n  "]}]}